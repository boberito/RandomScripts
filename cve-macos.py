#!/usr/bin/env python3

import re
import urllib3
import json
import requests
import time

def main():
    urllib3.disable_warnings()
    url = "https://support.apple.com/en-us/HT213940"    
    r = requests.get(url)
    contents = str(r.content)
    
    pattern = r'<p><strong>(.*?)<p><strong>'

    # Use re.findall to find all matches
    matches = re.findall(pattern, r.text, re.DOTALL)

    # Define a regex pattern to capture CVE references (e.g., CVE-2021-12345)
    cve_pattern = r'CVE-\d{4}-\d+'

    # Iterate over the matches and extract the CVE references
    for match in matches:
        cve_references = re.findall(cve_pattern, match)
        # print(match.strip())
        if cve_references:
            
            for ref in cve_references:
                
                nvdurl = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={}".format(ref)
                nvdRequest = requests.get(nvdurl)

                if nvdRequest.status_code != 200:
                    print(nvdRequest.status_code)
                    print(nvdRequest.text)
                    time.sleep(6)
                    continue
                else:
                    time.sleep(6)
                

                data = json.loads(nvdRequest.content.decode('utf-8'))
                for vulnerable in data['vulnerabilities']:
                    
                    if "configurations" not in vulnerable['cve']:
                        continue
                    severity = str()
                    score = float()
                    for metric in vulnerable['cve']['metrics']['cvssMetricV31']:
                        severity = metric['cvssData']['baseSeverity']
                        score = metric['cvssData']['baseScore']
                        
                    for config in vulnerable['cve']['configurations']:
                        # print(config)
                        for node in config['nodes']:
                            print("-----------------------------------------------")
                            print("\t\t{}".format(ref))
                            print("{}".format(str(match.strip()).split('<')[0]))
                            print("Severity: {}".format(severity))
                            print("Score: {}".format(score))
                            for cpematch in node['cpeMatch']:
                                if "versionEndExcluding" not in cpematch:
                                    continue
                                if "tvos" in cpematch['criteria'] or "iphone_os" in cpematch['criteria'] or "ipados" in cpematch['criteria'] or "watchos" in cpematch['criteria']:
                                    continue
                                
                                if "safari" in cpematch['criteria']:
                                    print("- Fixed in Safari {}".format(cpematch['versionEndExcluding']))
                                if "12" in cpematch['versionEndExcluding']:                            
                                    print("- fixed in Monterey {}".format(cpematch['versionEndExcluding']))
                                if "13" in cpematch['versionEndExcluding']:    
                                    print("- fixed in Ventura {}".format(cpematch['versionEndExcluding']))
                                if "versionStartIncluding" in cpematch:
                                    if "14" in cpematch['versionEndExcluding'] and "13" in cpematch['versionStartIncluding'] or "14" in cpematch['versionEndExcluding'] and "12" in cpematch['versionStartIncluding']:
                                        print("*** macOS {} is vulnerable ***".format(cpematch['versionStartIncluding']))
                                    
                            print("- fixed in Sonoma")                    

if __name__ == "__main__":
    main()
